<!DOCTYPE html>
<html class="I LIKE TOFU AND KIMCHI">
<html lang="en-US">

<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width"/>
<meta name="Keywords" content="Rent, Data, Map, East, Harlem, New York City"/>
<meta name="Description" content="Rent Data on East Harlem"/>
<meta name="HandheldFriendly" content="True"/>

<style>

@import url(순대.css);
@import url(http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css);

#map {
	width: 960px;
	height: 500px;
}

svg {
	position: relative;
}

path {
	fil: #000;
	fill-opacity: .2;
	stroke: #fff;
	stroke-width: 1.5px;
}

path:hover {
	fill: green;
	fill-opacity: .7;
}

</style>

<title>East Harlem Rent Data Map</title>

<p>This is an attempt at creating a map to help residents analyze and better comprehend the ebb and flow of rent prices in the <a href="http://en.wikipedia.org/wiki/East_Harlem" rel="Focus">East Harlem</a> area.

<p>

<p id="map">

<footer>
</footer>

<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

<script src="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.2/leaflet.js"></script>

<script>

var map = new L.Map("map", {center: [40.8, -73.94 ], zoom: 14})
    .addLayer(new L.TileLayer("http://{s}.tiles.mapbox.com/v3/examples.map-vyofok3q/{z}/{x}/{y}.png"));

var svg = d3.select(map.getPanes().overlayPane).append("svg"),
    g = svg.append("g").attr("class", "leaflet-zoom-hide");

d3.json("/home/turniphead/BetaNYC/Rent Map/shape-files/nycdata/shap/NYC.json", function(collection) {
	var transform = d3.gro.transform({point: projectPoint}),
		path=d3.geo.path().projection(tranform);

	var feature = g.selectAll("path")
		.data(collection.features)
		.enter().append("path");

	map.on("viewreset", reset);
	reset();

function reset() {
    var bounds = path.bounds(collection),
        topLeft = bounds[0],
        bottomRight = bounds[1];

    svg .attr("width", bottomRight[0] - topLeft[0])
        .attr("height", bottomRight[1] - topLeft[1])
        .style("left", topLeft[0] + "px")
        .style("top", topLeft[1] + "px");

    g .attr("transform", "translate(" + -topLeft[0] + "," + -topLeft[1] + ")");

    feature.attr("d", path);
  }

 function projectPoint(x, y) {
    var point = map.latLngToLayerPoint(new L.LatLng(y, x));
    this.stream.point(point.x, point.y);
  }
});
</script>


</script>
